// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: price/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PriceService_GetPrice_FullMethodName    = "/proto.PriceService/GetPrice"
	PriceService_ListPrices_FullMethodName  = "/proto.PriceService/ListPrices"
	PriceService_UpdatePrice_FullMethodName = "/proto.PriceService/UpdatePrice"
	PriceService_DeletePrice_FullMethodName = "/proto.PriceService/DeletePrice"
)

// PriceServiceClient is the client API for PriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceServiceClient interface {
	GetPrice(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceResp, error)
	ListPrices(ctx context.Context, in *ListPricesReq, opts ...grpc.CallOption) (*ListPricesResp, error)
	UpdatePrice(ctx context.Context, in *UpdatePriceReq, opts ...grpc.CallOption) (*UpdatePriceResp, error)
	DeletePrice(ctx context.Context, in *DeletePriceReq, opts ...grpc.CallOption) (*DeletePriceResp, error)
}

type priceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceServiceClient(cc grpc.ClientConnInterface) PriceServiceClient {
	return &priceServiceClient{cc}
}

func (c *priceServiceClient) GetPrice(ctx context.Context, in *GetPriceReq, opts ...grpc.CallOption) (*GetPriceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPriceResp)
	err := c.cc.Invoke(ctx, PriceService_GetPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceServiceClient) ListPrices(ctx context.Context, in *ListPricesReq, opts ...grpc.CallOption) (*ListPricesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPricesResp)
	err := c.cc.Invoke(ctx, PriceService_ListPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceServiceClient) UpdatePrice(ctx context.Context, in *UpdatePriceReq, opts ...grpc.CallOption) (*UpdatePriceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePriceResp)
	err := c.cc.Invoke(ctx, PriceService_UpdatePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceServiceClient) DeletePrice(ctx context.Context, in *DeletePriceReq, opts ...grpc.CallOption) (*DeletePriceResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePriceResp)
	err := c.cc.Invoke(ctx, PriceService_DeletePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceServiceServer is the server API for PriceService service.
// All implementations must embed UnimplementedPriceServiceServer
// for forward compatibility.
type PriceServiceServer interface {
	GetPrice(context.Context, *GetPriceReq) (*GetPriceResp, error)
	ListPrices(context.Context, *ListPricesReq) (*ListPricesResp, error)
	UpdatePrice(context.Context, *UpdatePriceReq) (*UpdatePriceResp, error)
	DeletePrice(context.Context, *DeletePriceReq) (*DeletePriceResp, error)
	mustEmbedUnimplementedPriceServiceServer()
}

// UnimplementedPriceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPriceServiceServer struct{}

func (UnimplementedPriceServiceServer) GetPrice(context.Context, *GetPriceReq) (*GetPriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedPriceServiceServer) ListPrices(context.Context, *ListPricesReq) (*ListPricesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrices not implemented")
}
func (UnimplementedPriceServiceServer) UpdatePrice(context.Context, *UpdatePriceReq) (*UpdatePriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrice not implemented")
}
func (UnimplementedPriceServiceServer) DeletePrice(context.Context, *DeletePriceReq) (*DeletePriceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrice not implemented")
}
func (UnimplementedPriceServiceServer) mustEmbedUnimplementedPriceServiceServer() {}
func (UnimplementedPriceServiceServer) testEmbeddedByValue()                      {}

// UnsafePriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceServiceServer will
// result in compilation errors.
type UnsafePriceServiceServer interface {
	mustEmbedUnimplementedPriceServiceServer()
}

func RegisterPriceServiceServer(s grpc.ServiceRegistrar, srv PriceServiceServer) {
	// If the following call pancis, it indicates UnimplementedPriceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PriceService_ServiceDesc, srv)
}

func _PriceService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).GetPrice(ctx, req.(*GetPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceService_ListPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPricesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).ListPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_ListPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).ListPrices(ctx, req.(*ListPricesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceService_UpdatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).UpdatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_UpdatePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).UpdatePrice(ctx, req.(*UpdatePriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceService_DeletePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceServiceServer).DeletePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceService_DeletePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceServiceServer).DeletePrice(ctx, req.(*DeletePriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceService_ServiceDesc is the grpc.ServiceDesc for PriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PriceService",
	HandlerType: (*PriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _PriceService_GetPrice_Handler,
		},
		{
			MethodName: "ListPrices",
			Handler:    _PriceService_ListPrices_Handler,
		},
		{
			MethodName: "UpdatePrice",
			Handler:    _PriceService_UpdatePrice_Handler,
		},
		{
			MethodName: "DeletePrice",
			Handler:    _PriceService_DeletePrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "price/api.proto",
}

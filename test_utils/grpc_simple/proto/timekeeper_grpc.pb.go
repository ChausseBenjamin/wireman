// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: timekeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeKeeperClient is the client API for TimeKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeKeeperClient interface {
	// Get the current date.
	GetDate(ctx context.Context, in *GetDateReq, opts ...grpc.CallOption) (*GetDateResp, error)
	// Return the name of the month in plain text.
	GetNameOfMonth(ctx context.Context, in *GetNameOfMonthReq, opts ...grpc.CallOption) (*GetNameOfMonthResp, error)
}

type timeKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeKeeperClient(cc grpc.ClientConnInterface) TimeKeeperClient {
	return &timeKeeperClient{cc}
}

func (c *timeKeeperClient) GetDate(ctx context.Context, in *GetDateReq, opts ...grpc.CallOption) (*GetDateResp, error) {
	out := new(GetDateResp)
	err := c.cc.Invoke(ctx, "/proto.TimeKeeper/GetDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeKeeperClient) GetNameOfMonth(ctx context.Context, in *GetNameOfMonthReq, opts ...grpc.CallOption) (*GetNameOfMonthResp, error) {
	out := new(GetNameOfMonthResp)
	err := c.cc.Invoke(ctx, "/proto.TimeKeeper/GetNameOfMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeKeeperServer is the server API for TimeKeeper service.
// All implementations must embed UnimplementedTimeKeeperServer
// for forward compatibility
type TimeKeeperServer interface {
	// Get the current date.
	GetDate(context.Context, *GetDateReq) (*GetDateResp, error)
	// Return the name of the month in plain text.
	GetNameOfMonth(context.Context, *GetNameOfMonthReq) (*GetNameOfMonthResp, error)
	mustEmbedUnimplementedTimeKeeperServer()
}

// UnimplementedTimeKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedTimeKeeperServer struct {
}

func (UnimplementedTimeKeeperServer) GetDate(context.Context, *GetDateReq) (*GetDateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDate not implemented")
}
func (UnimplementedTimeKeeperServer) GetNameOfMonth(context.Context, *GetNameOfMonthReq) (*GetNameOfMonthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNameOfMonth not implemented")
}
func (UnimplementedTimeKeeperServer) mustEmbedUnimplementedTimeKeeperServer() {}

// UnsafeTimeKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeKeeperServer will
// result in compilation errors.
type UnsafeTimeKeeperServer interface {
	mustEmbedUnimplementedTimeKeeperServer()
}

func RegisterTimeKeeperServer(s grpc.ServiceRegistrar, srv TimeKeeperServer) {
	s.RegisterService(&TimeKeeper_ServiceDesc, srv)
}

func _TimeKeeper_GetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeKeeperServer).GetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TimeKeeper/GetDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeKeeperServer).GetDate(ctx, req.(*GetDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeKeeper_GetNameOfMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameOfMonthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeKeeperServer).GetNameOfMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TimeKeeper/GetNameOfMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeKeeperServer).GetNameOfMonth(ctx, req.(*GetNameOfMonthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeKeeper_ServiceDesc is the grpc.ServiceDesc for TimeKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TimeKeeper",
	HandlerType: (*TimeKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDate",
			Handler:    _TimeKeeper_GetDate_Handler,
		},
		{
			MethodName: "GetNameOfMonth",
			Handler:    _TimeKeeper_GetNameOfMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timekeeper.proto",
}

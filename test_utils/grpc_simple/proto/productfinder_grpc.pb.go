// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: productfinder.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductFinderClient is the client API for ProductFinder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductFinderClient interface {
	// Return all available products
	GetProducts(ctx context.Context, in *GetProductsReq, opts ...grpc.CallOption) (*GetProductsResp, error)
	// Return the price of a given product
	GetPriceOfProduct(ctx context.Context, in *GetPriceOfProductReq, opts ...grpc.CallOption) (*GetPriceOfProductResp, error)
}

type productFinderClient struct {
	cc grpc.ClientConnInterface
}

func NewProductFinderClient(cc grpc.ClientConnInterface) ProductFinderClient {
	return &productFinderClient{cc}
}

func (c *productFinderClient) GetProducts(ctx context.Context, in *GetProductsReq, opts ...grpc.CallOption) (*GetProductsResp, error) {
	out := new(GetProductsResp)
	err := c.cc.Invoke(ctx, "/proto.ProductFinder/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productFinderClient) GetPriceOfProduct(ctx context.Context, in *GetPriceOfProductReq, opts ...grpc.CallOption) (*GetPriceOfProductResp, error) {
	out := new(GetPriceOfProductResp)
	err := c.cc.Invoke(ctx, "/proto.ProductFinder/GetPriceOfProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductFinderServer is the server API for ProductFinder service.
// All implementations must embed UnimplementedProductFinderServer
// for forward compatibility
type ProductFinderServer interface {
	// Return all available products
	GetProducts(context.Context, *GetProductsReq) (*GetProductsResp, error)
	// Return the price of a given product
	GetPriceOfProduct(context.Context, *GetPriceOfProductReq) (*GetPriceOfProductResp, error)
	mustEmbedUnimplementedProductFinderServer()
}

// UnimplementedProductFinderServer must be embedded to have forward compatible implementations.
type UnimplementedProductFinderServer struct {
}

func (UnimplementedProductFinderServer) GetProducts(context.Context, *GetProductsReq) (*GetProductsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductFinderServer) GetPriceOfProduct(context.Context, *GetPriceOfProductReq) (*GetPriceOfProductResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceOfProduct not implemented")
}
func (UnimplementedProductFinderServer) mustEmbedUnimplementedProductFinderServer() {}

// UnsafeProductFinderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductFinderServer will
// result in compilation errors.
type UnsafeProductFinderServer interface {
	mustEmbedUnimplementedProductFinderServer()
}

func RegisterProductFinderServer(s grpc.ServiceRegistrar, srv ProductFinderServer) {
	s.RegisterService(&ProductFinder_ServiceDesc, srv)
}

func _ProductFinder_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFinderServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductFinder/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFinderServer).GetProducts(ctx, req.(*GetProductsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductFinder_GetPriceOfProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceOfProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductFinderServer).GetPriceOfProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProductFinder/GetPriceOfProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductFinderServer).GetPriceOfProduct(ctx, req.(*GetPriceOfProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductFinder_ServiceDesc is the grpc.ServiceDesc for ProductFinder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductFinder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProductFinder",
	HandlerType: (*ProductFinderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _ProductFinder_GetProducts_Handler,
		},
		{
			MethodName: "GetPriceOfProduct",
			Handler:    _ProductFinder_GetPriceOfProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "productfinder.proto",
}
